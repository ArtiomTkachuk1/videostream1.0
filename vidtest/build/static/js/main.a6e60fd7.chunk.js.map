{"version":3,"sources":["components/ReactPlayer/ReactPlayer.js","components/VideoTag/VideoTagv0.js","components/VideojsPlayer/VideoPlayer.js","components/VideojsPlayer/VideojsPlayer.js","App.js","serviceWorker.js","index.js"],"names":["RP","props","ChunkRootUpdater","chunk_max","state","chunknum","setState","pathbase","URL","this","Fragment","style","justifyContent","display","margin","width","height","backgroundColor","url","playing","muted","onEnded","React","Component","VideoTag","src","autoPlay","VideoPlayer","player","videojs","videoNode","console","log","dispose","data-vjs-player","ref","node","className","videoJsOptions","autoplay","controls","sources","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAEqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAKRC,iBAAiB,WACV,EAAKD,MAAME,UAAU,EAAKC,MAAMC,UACjC,EAAKC,SAAS,CACZD,SAAS,EAAKD,MAAMC,SAAS,KAPnC,EAAKE,SAAS,+BACd,EAAKH,MAAQ,CAACC,SAAW,GAHR,E,sEAaV,IAAD,OACFG,EAAIC,KAAKF,SAASE,KAAKL,MAAMC,SACjC,OACE,kBAAC,IAAMK,SAAP,KACE,wBACAC,MAAO,CACDC,eAAe,SACfC,QAAQ,OACRC,OAAO,SAJb,gBASA,kBAAC,IAAD,CACEH,MAAO,CACRI,MAAM,OACNC,OAAO,MACPH,QAAQ,OACRC,OAAO,OACPG,gBAAgB,SAEbC,IAAKV,EACLW,SAAS,EACTC,OAAO,EACPC,QACE,kBAAK,EAAKnB,2B,GAvCQoB,IAAMC,WCDjBC,E,YACnB,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,iBAAiB,WACV,EAAKD,MAAME,UAAU,EAAKC,MAAMC,UACjC,EAAKC,SAAS,CACZD,SAAS,EAAKD,MAAMC,SAAS,KARnC,EAAKE,SAAS,+BACd,EAAKH,MAAQ,CACTC,SAAW,GAJE,E,sEAejB,IAAIoB,EAAMhB,KAAKF,SAAWE,KAAKL,MAAMC,SACrC,OACE,kBAAC,IAAMK,SAAP,KACE,wBACAC,MAAO,CACDC,eAAe,SACfC,QAAQ,OACRC,OAAO,SAJb,aASA,2BACAH,MAAO,CACDI,MAAM,MACNC,OAAO,MACPH,QAAQ,OACRC,OAAO,OACPG,gBAAgB,SAEpBS,UAAQ,EACRN,OAAK,EACLK,IAAKA,EACLJ,QAASZ,KAAKP,wB,GAvCcoB,IAAMC,W,QCEvBI,E,4LAGjBlB,KAAKmB,OAASC,YAAQpB,KAAKqB,UAAWrB,KAAKR,OAAO,WAChD8B,QAAQC,IAAI,gBAAiBvB,W,6CAM3BA,KAAKmB,QACPnB,KAAKmB,OAAOK,Y,+BAON,IAAD,OAEP,OADAF,QAAQC,IAAIvB,KAAKqB,WAEf,6BACE,yBAAKI,mBAAA,GACH,2BAAOC,IAAM,SAAAC,GAAI,OAAI,EAAKN,UAAYM,GAAOC,UAAU,mB,GAvBxBf,IAAMC,WCDzCe,EAAiB,CACrBC,UAAW,EACXnB,OAAQ,EACRoB,UAAW,EACXC,QAAU,CAAC,CACThB,IAAK,gCACLiB,KAAM,eCgBKC,GDX4BpB,Y,iLCFvC,OACE,kBAAC,IAAMb,SAAP,KACE,kBAAC,EAAD,CACEP,UAAW,IAEb,kBAAC,EAAD,CACEA,UAAW,S,GATHoB,cCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a6e60fd7.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactPlayer from 'react-player'\r\nexport default class RP extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pathbase='http://localhost:3000/video/'\r\n    this.state = {chunknum : 1};\r\n  }\r\n\r\n  ChunkRootUpdater=()=>{\r\n      if(this.props.chunk_max>this.state.chunknum){\r\n        this.setState({\r\n          chunknum:this.state.chunknum+1\r\n        })\r\n    }\r\n  }\r\n  render(){\r\n    let URL=this.pathbase+this.state.chunknum\r\n    return (\r\n      <React.Fragment>\r\n        <h1\r\n        style={{\r\n              justifyContent:\"center\",\r\n              display:\"flex\",\r\n              margin:\"auto\",\r\n            }}\r\n        >\r\n          React player\r\n        </h1>\r\n        <ReactPlayer\r\n          style={{\r\n  \t\t\t\t\t\t\twidth:\"120%\",\r\n  \t\t\t\t\t\t\theight:\"80%\",\r\n  \t\t\t\t\t\t\tdisplay:\"flex\",\r\n  \t\t\t\t\t\t\tmargin:\"auto\",\r\n  \t\t\t\t\t\t\tbackgroundColor:\"black\",\r\n  \t\t\t\t\t\t}}\r\n            url={URL}\r\n            playing={true}\r\n            muted={true}\r\n            onEnded={\r\n              () =>this.ChunkRootUpdater()\r\n            }\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nexport default class VideoTag extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.pathbase='http://localhost:3000/video/'\r\n    this.state = {\r\n        chunknum : 1\r\n      };\r\n  }\r\n  ChunkRootUpdater=()=>{\r\n      if(this.props.chunk_max>this.state.chunknum){\r\n        this.setState({\r\n          chunknum:this.state.chunknum+1\r\n        })\r\n    }\r\n  }\r\n  render(){\r\n    let src = this.pathbase + this.state.chunknum\r\n    return (\r\n      <React.Fragment>\r\n        <h1\r\n        style={{\r\n              justifyContent:\"center\",\r\n              display:\"flex\",\r\n              margin:\"auto\",\r\n            }}\r\n        >\r\n          Video tag\r\n        </h1>\r\n        <video\r\n        style={{\r\n              width:\"30%\",\r\n              height:\"20%\",\r\n              display:\"flex\",\r\n              margin:\"auto\",\r\n              backgroundColor:\"black\",\r\n            }}\r\n          autoPlay\r\n          muted\r\n          src={src}\r\n          onEnded={this.ChunkRootUpdater}\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport videojs from 'video.js'\r\n\r\nexport default class VideoPlayer extends React.Component {\r\n  componentDidMount() {\r\n    // instantiate Video.js\r\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\r\n      console.log('onPlayerReady', this)\r\n    });\r\n  }\r\n\r\n  // destroy player on unmount\r\n  componentWillUnmount() {\r\n    if (this.player) {\r\n      this.player.dispose()\r\n    }\r\n  }\r\n\r\n  // wrap the player in a div with a `data-vjs-player` attribute\r\n  // so videojs won't create additional wrapper in the DOM\r\n  // see https://github.com/videojs/video.js/pull/3856\r\n  render() {\r\n    console.log(this.videoNode)\r\n    return (\r\n      <div>\r\n        <div data-vjs-player>\r\n          <video ref={ node => this.videoNode = node } className=\"video-js\"></video>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React , { Component } from 'react';\r\nimport VideoPlayer from './VideoPlayer'\r\nconst videoJsOptions = {\r\n  autoplay : true,\r\n  muted : true,\r\n  controls : true,\r\n  sources : [{\r\n    src: 'http://localhost:3000/video/1',\r\n    type: 'video/mp4'\r\n  }]\r\n}\r\n\r\n\r\nexport default class VideojsPlayer extends Component{\r\n  render(){\r\n    return <VideoPlayer { ...videoJsOptions } />\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RP from './components/ReactPlayer/ReactPlayer'\r\nimport VideoTag from './components/VideoTag/VideoTagv0'\r\nimport VideojsPlayer from './components/VideojsPlayer/VideojsPlayer'\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n\r\n  render(){\r\n    return(\r\n      <React.Fragment>\r\n        <RP\r\n          chunk_max={6}\r\n        />\r\n        <VideoTag\r\n          chunk_max={6}\r\n        />\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n<VideojsPlayer\r\n  chunk_max={6}\r\n/>\r\n*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}